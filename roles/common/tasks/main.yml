---
# tasks file for common
- name: Manage Git email configuration
  block:
    - name: Check for existing Git email config
      command: git config --global user.email
      register: existing_email
      failed_when: false
      changed_when: false

    - name: Use existing Git config if available
      set_fact:
        git_user_email: "{{ existing_email.stdout }}"
      when: existing_email.rc == 0 and existing_email.stdout != ""

    - name: Check for cached email file
      stat:
        path: "{{ ansible_env.HOME }}/.config/ansible/git_email"
      register: cache_file
      when: git_user_email is not defined

    - name: Read cached email
      slurp:
        src: "{{ ansible_env.HOME }}/.config/ansible/git_email"
      register: cached_data
      when: 
        - git_user_email is not defined
        - cache_file.stat.exists

    - name: Set email from cache
      set_fact:
        git_user_email: "{{ cached_data.content | b64decode | trim }}"
      when:
        - git_user_email is not defined
        - cache_file.stat.exists

    - name: Prompt for email if needed
      pause:
        prompt: "Enter your Git email address"
      register: email_input
      when: git_user_email is not defined

    - name: Set email from prompt
      set_fact:
        git_user_email: "{{ email_input.user_input }}"
      when: email_input.user_input is defined

    - name: Create cache directory
      file:
        path: "{{ ansible_env.HOME }}/.config/ansible"
        state: directory
        mode: '0700'
      when: email_input.user_input is defined

    - name: Save email to cache
      copy:
        content: "{{ git_user_email }}"
        dest: "{{ ansible_env.HOME }}/.config/ansible/git_email"
        mode: '0600'
      when: email_input.user_input is defined

- name: Clear email cache if requested
  file:
    path: "{{ ansible_env.HOME }}/.config/ansible/git_email"
    state: absent
  when: clear_email_cache | default(false) | bool
  tags: clear-cache

- name: Common development environment setup
  block:
    - name: Create directory for local development
      file:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
      with_items: "{{ dev_directories }}"

    - name: Check the git directory status
      stat:
        path: "{{ dotfile_repo.dest }}"
      register: dotfile_repo_directory

    - name: Configure git_config
      git_config:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        scope: "{{ item.scope }}"
      with_items: "{{ git_configurations }}"

    - name: Clone dotfiles repository
      git:
        repo: "{{ dotfile_repo.repo }}"
        dest: "{{ dotfile_repo.dest }}"
        clone: yes
      when:
        - not dotfile_repo_directory.stat.exists

    - name: Update dotfiles repository
      git:
        repo: "{{ dotfile_repo.repo }}"
        dest: "{{ dotfile_repo.dest }}"
        clone: no
        track_submodules: yes
        update: yes
      when:
        - dotfile_repo_directory.stat.exists

    - name: Setup dotfile settings
      block:
        - name: Check if setup.sh exists
          stat:
            path: "{{ dotfile_repo.dest }}/setup.sh"
          register: setup_script

        - name: Run dotfiles setup script
          shell:
            cmd: bash setup.sh
            chdir: "{{ dotfile_repo.dest }}"
          register: setup_result
          when: setup_script.stat.exists
          failed_when: setup_result.rc != 0
          changed_when: setup_result.rc == 0

        - name: Display setup script output
          debug:
            var: setup_result.stdout_lines
          when: setup_script.stat.exists and setup_result.stdout_lines is defined

        - name: Warn if setup.sh not found
          debug:
            msg: "Warning: setup.sh not found in {{ dotfile_repo.dest }}"
          when: not setup_script.stat.exists

