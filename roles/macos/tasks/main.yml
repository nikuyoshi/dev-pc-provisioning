---
# tasks file for mac  
- name: Check if Homebrew is installed
  command: which brew
  register: brew_check
  failed_when: false
  changed_when: false

- name: Fail with clear message if Homebrew not found
  fail:
    msg: |
      Homebrew is not installed. Please install it first:
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      
      After installation, you may need to add Homebrew to your PATH:
      - Apple Silicon: echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
      - Intel: echo 'eval "$(/usr/local/bin/brew shellenv)"' >> ~/.zprofile
  when: brew_check.rc != 0


- name: Check the oh-my-zsh directory status
  stat:
    path: "{{ oh_my_zsh.dest }}"
  register: oh_my_zsh_directory

- name: Install oh-my-zsh
  shell: sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  when:
    - not oh_my_zsh_directory.stat.exists



- name: Check zsh-peco-history directory status
  stat:
    path: "{{ zsh_peco_history.dest }}"
  register: zsh_peco_history_directory

- name: Clone zsh-peco-history repository
  git:
    repo: "{{ zsh_peco_history.repo }}"
    dest: "{{ zsh_peco_history.dest }}"
    clone: yes
  when:
    - not zsh_peco_history_directory.stat.exists

- name: Install homebrew tap softwares
  homebrew_tap:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
  with_items: "{{ homebrew_tap_packages }}"

- name: Update homebrew and install softwares
  community.general.homebrew:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    update_homebrew: yes
  with_items: "{{ homebrew_packages }}"

- name: Install homebrew cask softwares
  community.general.homebrew_cask:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
  with_items: "{{ homebrew_cask_packages }}"

- name: Configure osx_defaults
  osx_defaults:
    domain: "{{ item.domain }}"
    key: "{{ item.key }}"
    type: "{{ item.type }}"
    value: "{{ item.value }}"
    state: "{{ item.state }}"
  with_items: "{{ osx_defaults_configurations }}"

- name: Configure npm
  npm:
    name: "{{ item.name }}"
    global: "{{ item.global }}"
    state: "{{ item.state }}"
  with_items: "{{ nodejs_npm }}"

- name: Check if fish is already in /etc/shells
  command: grep -q "^/opt/homebrew/bin/fish$" /etc/shells
  register: fish_in_shells
  failed_when: false
  changed_when: false

- name: Ensure /opt/homebrew/bin/fish is listed in /etc/shells
  become: true
  ansible.builtin.lineinfile:
    path: /etc/shells
    line: /opt/homebrew/bin/fish
    state: present
    create: false
  when: fish_in_shells.rc != 0

- name: Get current user shell
  command: dscl . -read /Users/{{ ansible_user_id }} UserShell
  register: current_shell
  changed_when: false
  failed_when: false

- name: Change default shell to fish
  become: true
  user:
    name: "{{ ansible_user_id }}"
    shell: /opt/homebrew/bin/fish
  when: '"/opt/homebrew/bin/fish" not in current_shell.stdout'